Monday 03/10/24:

Python learning:
* https://www.youtube.com/watch?v=b093aqAZiPU&t=1s 

* https://www.youtube.com/watch?v=b093aqAZiPU&t=1s 

Notes about learning python:

- Syntax:  basic syntax of the language, including how to declare variables, write loops, conditional statements, and functions.

- Data types: data types supported by the language, such as integers, floats, strings, arrays, dictionaries, etc.

1. Numeric Types:

* int: Integer type, e.g., 5, -3, 0.
* float: Floating-point type, e.g., 3.14, -0.001, 2.0.

2. Sequence Types:

* str: String type, e.g., "hello", 'world', "123".
* list: Ordered collection of items, e.g., [1, 2, 3], ['a', 'b', 'c'].
* tuple: Immutable ordered collection of items, e.g., (1, 2, 3), ('a', 'b', 'c').

3. Mapping Type:

* dict: Collection of key-value pairs, e.g., {'name': 'John', 'age': 30}, {'a': 1, 'b': 2}.

4. Set Types:

* set: Unordered collection of unique items, e.g., {1, 2, 3}, {'a', 'b', 'c'}.
* frozenset: Immutable set, e.g., frozenset({1, 2, 3}).

5. Boolean Type:

* bool: Boolean value, either True or False.

6. None Type:

* None: Represents the absence of a value or a null value.

- Control Structures: how to control the flow of the program using control structures like if statements, switch statements, loops (for, while), and exception handling.

- Functions/Methods:  how to define and use functions/methods in the language. Learn about parameters, return types, and scope.

- Libraries and modules: Explore the standard libraries/modules that come with the language, as well as popular third-party libraries that extend its functionality.

- input/output: how to handle input from users or files and output results to the console or files.

- Debugging: debugging techniques specific to the language, including using debuggers and print statements for troubleshooting.

- Error Handling:  how errors and exceptions are handled in the language and how to write robust code that gracefully handles errors.

- Documentation: Get comfortable with reading the language's documentation to understand its features, functions, and best practices.

- Practice: practice writing code, start with small projects or exercises to reinforce what I've learned and gradually tackle more complex challenges.